import React, { useState, useCallback, useEffect } from 'react';
import { CustomDropdown } from '../shared';
import { TextInput } from '../inputsComponentes';
import ProfileImageUpload from '../ProfileImageUpload';
import { fetchRoles } from '../../../types/mockups.types';
import type { IEmpleado } from '../../../types/personal.types';
import type { IRol } from '../../../types/database.types';

interface InformacionPersonalProps {
    empleado?: IEmpleado;
    onChange: (empleado: IEmpleado) => void;
}

const InformacionPersonal: React.FC<InformacionPersonalProps> = ({ empleado, onChange }) => {
    const [roles, setRoles] = useState<IRol[]>([]);
    const [loadingRoles, setLoadingRoles] = useState(true);
    const [isDevMode] = useState(import.meta.env.DEV);

    // Función para detectar si un dato fue autogenerado
    const isAutoGeneratedData = (value: string | undefined, type: 'nif'): boolean => {
        if (!value) return false;

        if (type === 'nif') {
            // Verificar si el NIF sigue el patrón de generación automática (8 dígitos + 1 letra)
            return /^\d{8}[A-Z]$/.test(value);
        }

        return false;
    };

    // Cargar roles desde mockups
    useEffect(() => {
        const loadRoles = async () => {
            try {
                setLoadingRoles(true);
                const rolesData = await fetchRoles();
                setRoles(rolesData);
            } catch (error) {
                console.error('Error cargando roles:', error);
            } finally {
                setLoadingRoles(false);
            }
        };

        loadRoles();
    }, []);

    const [formData, setFormData] = useState<IEmpleado>({
        // Campos requeridos de IUsuario
        nombre: empleado?.nombre || '',
        telefono: empleado?.telefono || '',
        password: empleado?.password || '',
        empresa_id: empleado?.empresa_id || 3,
        establecimiento_id: empleado?.establecimiento_id || 7,
        created_at: empleado?.created_at || new Date().toISOString(),
        updated_at: empleado?.updated_at || new Date().toISOString(),
        // Campos opcionales de IUsuario
        id: empleado?.id,
        email: empleado?.email || '',
        apellidos: empleado?.apellidos || '',
        foto: empleado?.foto,
        ultimo_login: empleado?.ultimo_login,
        pin: empleado?.pin,
        token_reset: empleado?.token_reset,
        token_expira: empleado?.token_expira,
        refresh_token: empleado?.refresh_token,
        // Campos adicionales para personal
        nombreCompleto: empleado?.nombreCompleto || '',
        puesto: empleado?.puesto || '',
        puestos: empleado?.puestos || ['Camarero'],
        nif: empleado?.nif || '',
        numeroSeguridadSocial: empleado?.numeroSeguridadSocial || '',
        estado: empleado?.estado || 'activo',
        imagen: empleado?.imagen || null,
        // Relaciones
        rol: empleado?.rol
    });

    // Sincronizar el estado del formulario cuando cambie el prop empleado
    useEffect(() => {
        if (empleado) {
            setFormData({
                // Campos requeridos de IUsuario
                nombre: empleado.nombre || '',
                telefono: empleado.telefono || '',
                password: empleado.password || '',
                empresa_id: empleado.empresa_id || 3,
                establecimiento_id: empleado.establecimiento_id || 7,
                created_at: empleado.created_at || new Date().toISOString(),
                updated_at: empleado.updated_at || new Date().toISOString(),
                // Campos opcionales de IUsuario
                id: empleado.id,
                email: empleado.email || '',
                apellidos: empleado.apellidos || '',
                foto: empleado.foto,
                ultimo_login: empleado.ultimo_login,
                pin: empleado.pin,
                token_reset: empleado.token_reset,
                token_expira: empleado.token_expira,
                refresh_token: empleado.refresh_token,
                // Campos adicionales para personal
                nombreCompleto: empleado.nombreCompleto || '',
                puesto: empleado.puesto || '',
                puestos: empleado.puestos || ['Camarero'],
                nif: empleado.nif || '',
                numeroSeguridadSocial: empleado.numeroSeguridadSocial || '',
                estado: empleado.estado || 'activo',
                imagen: empleado.imagen || null,
                // Relaciones
                rol: empleado.rol
            });
        }
    }, [empleado]);

    const [errors] = useState<Partial<IEmpleado>>({});

    const handleInputChange = (field: keyof IEmpleado, value: any) => {
        const newData = { ...formData, [field]: value };

        // Si se cambia el nombre completo, actualizar automáticamente nombre y apellidos
        if (field === 'nombreCompleto') {
            const partes = value.split(' ');
            newData.nombre = partes[0] || '';
            newData.apellidos = partes.slice(1).join(' ') || '';
        }

        // Si se cambia el rol, actualizar el puesto
        if (field === 'rol' && value) {
            newData.puesto = value.nombre;
            newData.puestos = [value.nombre];
        }

        setFormData(newData);
        onChange(newData);
    };

    const handleImageUpload = useCallback(async (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = (e) => {
                const imageUrl = e.target?.result as string;
                handleInputChange('imagen', imageUrl);
            };
            reader.readAsDataURL(file);
        }
    }, []);

    const removeImage = () => {
        handleInputChange('imagen', null);
    };

    // Preparar opciones de roles para el dropdown
    const rolesOptions = roles.map(rol => ({
        value: rol.id.toString(),
        label: rol.nombre,
        description: rol.descripcion
    }));

    return (
        <div className="p-6 space-y-6">
            {/* Foto de perfil */}
            <div className="flex justify-center">
                <ProfileImageUpload
                    image={formData.imagen}
                    onImageUpload={handleImageUpload}
                    onImageRemove={removeImage}
                    size="large"
                    shape="rounded"
                    alt="Foto del empleado"
                    maxSize={5}
                    allowedTypes={['image/jpeg', 'image/png', 'image/webp']}
                />
            </div>

            {/* Campos de información */}
            <div className="space-y-4">
                {/* Nombre completo */}
                <div className="flex justify-center mb-6">
                    <div className="w-full max-w-md">
                        <TextInput
                            value={formData.nombreCompleto || ''}
                            onChange={(value) => handleInputChange('nombreCompleto', value)}
                            label="Nombre completo"
                            placeholder="Introduce el nombre completo"
                            required
                            error={errors.nombreCompleto}
                        />
                    </div>
                </div>

                {/* Email y teléfono */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <TextInput
                        value={formData.email || ''}
                        onChange={(value) => handleInputChange('email', value)}
                        type="email"
                        label="Email"
                        placeholder="email@ejemplo.com"
                        required
                        error={errors.email}
                    />
                    <TextInput
                        value={formData.telefono || ''}
                        onChange={(value) => handleInputChange('telefono', value)}
                        type="tel"
                        label="Teléfono"
                        placeholder="600 000 000"
                        required
                        error={errors.telefono}
                    />
                </div>

                {/* NIF y CIF de la empresa */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <TextInput
                            value={formData.nif || ''}
                            onChange={(value) => handleInputChange('nif', value)}
                            label="NIF"
                            placeholder="12345678A"
                            required
                            error={errors.nif}
                        />
                        {isDevMode && isAutoGeneratedData(formData.nif, 'nif') && (
                            <p className="text-xs mt-1 text-yellow-600">
                                ⚠️ Dato autogenerado para desarrollo
                            </p>
                        )}
                    </div>
                    <div>
                        <TextInput
                            value={formData.cifEmpresa || ''}
                            onChange={(value) => handleInputChange('cifEmpresa', value)}
                            label="CIF de la empresa"
                            placeholder="B12345678"
                            disabled
                            error={errors.cifEmpresa}
                        />
                        <p className="text-xs mt-1 text-gray-500">
                            CIF de la empresa a la que pertenece el empleado
                        </p>
                    </div>
                </div>

                {/* Rol del sistema */}
                <div className="w-full">
                    <div>
                        <label className="block text-sm font-medium mb-2">
                            Rol del sistema
                        </label>
                        {loadingRoles ? (
                            <div className="text-sm text-gray-500">Cargando roles...</div>
                        ) : (
                            <CustomDropdown
                                options={rolesOptions}
                                selectedValues={formData.rol ? [formData.rol.id.toString()] : []}
                                onSelectionChange={(values) => {
                                    const selectedRole = roles.find(r => r.id.toString() === values[0]);
                                    handleInputChange('rol', selectedRole);
                                }}
                                placeholder="Seleccionar rol"
                                multiSelect={false}
                            />
                        )}
                        <p className="text-xs mt-1 text-gray-500">
                            El rol determina los permisos y acceso del empleado en el sistema
                        </p>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default InformacionPersonal;

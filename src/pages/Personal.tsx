import React, { useState, useEffect } from 'react';
import { useTheme } from '../hooks/useTheme';
import { useAuth } from '../hooks/useAuth';
import { ConfiguracionPersonalModal } from '../components/personal';
import { PlusIcon, UserIcon } from '../components/icons';
import { fetchUsuarios, fetchRolesUsuarios, fetchRoles } from '../types/mockups.types'; //mockRolesUsuarios, mockRoles
import { useEmpresas } from '../hooks/useEntities';
import type { IEmpleado } from '../types/personal.types';
import { Header } from '../components';

const Personal: React.FC = () => {
    const { currentTheme } = useTheme();
    const { user } = useAuth();
    const { empresas } = useEmpresas();
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [selectedEmpleado, setSelectedEmpleado] = useState<IEmpleado | undefined>();
    const [empleados, setEmpleados] = useState<IEmpleado[]>([]);
    const [loading, setLoading] = useState(true);
    // const [isDevMode] = useState(import.meta.env.DEV);

    // Función para detectar si un dato fue autogenerado
    const isAutoGeneratedData = (value: string | undefined, type: 'nif'): boolean => {
        if (!value) return false;

        if (type === 'nif') {
            // Verificar si el NIF sigue el patrón de generación automática (8 dígitos + 1 letra)
            return /^\d{8}[A-Z]$/.test(value);
        }

        return false;
    };

    // Cargar datos de empleados desde mockups
    useEffect(() => {
        const loadEmpleados = async () => {
            try {
                setLoading(true);
                const usuariosData = await fetchUsuarios();
                const rolesUsuariosData = await fetchRolesUsuarios();
                const rolesData = await fetchRoles();
                const empresasData = empresas || [];

                // Convertir IUsuario a IEmpleado con datos adicionales
                const empleadosData: IEmpleado[] = usuariosData
                    .filter(usuario => {
                        // Solo mostrar empleados de la misma empresa que el usuario logueado
                        if (!user?.empresa_id) return false;
                        return usuario.empresa_id === user.empresa_id;
                    })
                    .map(usuario => {
                        // Buscar el rol del usuario en roles_usuarios
                        const rolUsuario = rolesUsuariosData.find(ru => ru.usuario_id === usuario.id);
                        const rol = rolUsuario ? rolesData.find(r => r.id === rolUsuario.rol_id) : undefined;

                        // Generar datos consistentes basados en el ID del usuario
                        const nif = generateNIF(usuario.id);

                        // Encontrar la empresa del usuario
                        const empresa = empresasData.find((e: any) => e.id === usuario.empresa_id);
                        const cif = empresa ? empresa.nif : undefined;

                        return {
                            ...usuario,
                            // Generar nombre completo
                            nombreCompleto: `${usuario.nombre} ${usuario.apellidos || ''}`.trim(),
                            // Usar el rol real de la base de datos
                            puesto: rol?.nombre || 'Sin asignar',
                            puestos: rol ? [rol.nombre] : [],
                            // Datos adicionales consistentes
                            nif,
                            numeroSeguridadSocial: undefined, // No se genera NSS en mockups
                            cifEmpresa: cif,
                            // Estado basado en el estado del usuario
                            estado: usuario.estado === 'activo' ? 'activo' : 'inactivo',
                            // Usar foto como imagen
                            imagen: usuario.foto || null,
                            // Relaciones con datos de la base de datos
                            rol,
                            empresa: undefined, // Se puede cargar si es necesario
                            establecimiento: undefined // Se puede cargar si es necesario
                        };
                    });

                setEmpleados(empleadosData);
            } catch (error) {
                console.error('Error cargando empleados:', error);
                // Fallback a datos estáticos si hay error
                setEmpleados(getEmpleadosFallback());
            } finally {
                setLoading(false);
            }
        };

        loadEmpleados();
    }, [user]);

    // Generar NIF consistente basado en el ID del usuario
    const generateNIF = (userId: number): string => {
        const letras = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        const numeros = (userId * 1234567).toString().padStart(8, '0').slice(-8);
        const letra = letras[userId % letras.length];
        return `${numeros}${letra}`;
    };

    // Función para obtener la información de roles organizada
    const getRolesInfo = (empleado: IEmpleado) => {
        const roles: string[] = [];

        // Agregar el rol principal si existe
        if (empleado.rol) {
            roles.push(empleado.rol.nombre);
        }

        return { roles };
    };

    // Datos de fallback si hay error en la carga
    const getEmpleadosFallback = (): IEmpleado[] => [
        {
            id: 1,
            email: 'laura@email.com',
            password: '',
            nombre: 'Laura',
            apellidos: 'García',
            telefono: '600111222',
            foto: undefined,
            empresa_id: 3,
            establecimiento_id: 7,
            ultimo_login: undefined,
            pin: undefined,
            token_reset: undefined,
            token_expira: undefined,
            created_at: '2025-07-15T10:30:00.000Z',
            updated_at: '2025-07-15T10:30:00.000Z',
            refresh_token: undefined,
            // Campos adicionales
            nombreCompleto: 'Laura García',
            puesto: 'Manager',
            puestos: ['Manager'],
            nif: '12345678A',
            numeroSeguridadSocial: undefined,
            estado: 'activo',
            imagen: null
        },
        {
            id: 2,
            email: 'carlos@email.com',
            password: '',
            nombre: 'Carlos',
            apellidos: 'Rodríguez',
            telefono: '600333444',
            foto: undefined,
            empresa_id: 3,
            establecimiento_id: 7,
            ultimo_login: undefined,
            pin: undefined,
            token_reset: undefined,
            token_expira: undefined,
            created_at: '2025-07-16T14:20:00.000Z',
            updated_at: '2025-07-16T14:20:00.000Z',
            refresh_token: undefined,
            // Campos adicionales
            nombreCompleto: 'Carlos Rodríguez',
            puesto: 'Camarero',
            puestos: ['Camarero'],
            nif: '87654321B',
            numeroSeguridadSocial: undefined,
            estado: 'activo',
            imagen: null
        },
        {
            id: 3,
            email: 'ana@email.com',
            password: '',
            nombre: 'Ana',
            apellidos: 'Martínez',
            telefono: '600555666',
            foto: undefined,
            empresa_id: 3,
            establecimiento_id: 7,
            ultimo_login: undefined,
            pin: undefined,
            token_reset: undefined,
            token_expira: undefined,
            created_at: '2025-07-17T09:15:00.000Z',
            updated_at: '2025-07-17T09:15:00.000Z',
            refresh_token: undefined,
            // Campos adicionales
            nombreCompleto: 'Ana Martínez',
            puesto: 'Cocinero',
            puestos: ['Cocinero'],
            nif: '11223344C',
            numeroSeguridadSocial: undefined,
            estado: 'inactivo',
            imagen: null
        }
    ];

    const handleOpenModal = (empleado?: IEmpleado) => {
        setSelectedEmpleado(empleado);
        setIsModalOpen(true);
    };

    const handleOpenNewEmpleadoModal = () => {
        setSelectedEmpleado(undefined);
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
        setSelectedEmpleado(undefined);
    };

    const handleSaveEmpleado = (empleado: IEmpleado) => {
        if (empleado.id) {
            // Actualizar empleado existente
            setEmpleados(prev => prev.map(emp =>
                emp.id === empleado.id ? {
                    ...empleado,
                    estado: 'activo',
                    // Mantener campos de IUsuario actualizados
                    nombre: empleado.nombreCompleto?.split(' ')[0] || empleado.nombre,
                    apellidos: empleado.nombreCompleto?.split(' ').slice(1).join(' ') || empleado.apellidos,
                    updated_at: new Date().toISOString(),
                    // Mantener el rol como viene del modal
                    rol: empleado.rol,
                    puesto: empleado.rol?.nombre || 'Sin asignar',
                    puestos: empleado.rol ? [empleado.rol.nombre] : []
                } : emp
            ));
        } else {
            // Crear nuevo empleado
            const newEmpleado: IEmpleado = {
                ...empleado,
                id: Date.now(),
                estado: 'activo',
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString(),
                // Campos requeridos de IUsuario
                nombre: empleado.nombreCompleto?.split(' ')[0] || 'Nuevo',
                apellidos: empleado.nombreCompleto?.split(' ').slice(1).join(' ') || 'Empleado',
                telefono: empleado.telefono || '600000000',
                email: empleado.email || `empleado${Date.now()}@email.com`,
                password: '',
                empresa_id: 3,
                establecimiento_id: 7,
                // Mantener el rol como viene del modal
                rol: empleado.rol,
                puesto: empleado.rol?.nombre || 'Sin asignar',
                puestos: empleado.rol ? [empleado.rol.nombre] : []
            };
            setEmpleados(prev => [...prev, newEmpleado]);
        }
    };

    const handleDeleteEmpleado = (empleado: IEmpleado) => {
        setEmpleados(prev => prev.filter(emp => emp.id !== empleado.id));
    };

    if (loading) {
        return (
            <div className="min-h-screen flex items-center justify-center" style={{ backgroundColor: currentTheme.colors.background }}>
                <div className="text-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 mx-auto mb-4" style={{ borderColor: currentTheme.colors.primary }}></div>
                    <p style={{ color: currentTheme.colors.textSecondary }}>Cargando empleados...</p>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen" style={{ backgroundColor: currentTheme.colors.background }}>
            <div className="container mx-auto">
                {/* Header */}

                <div className="mb-8">
                    <Header
                        title="Empleados actuales"
                    />
                </div>

                {/* Stats Cards */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                    <div
                        className="p-6 rounded-lg border"
                        style={{
                            backgroundColor: currentTheme.colors.sidebar,
                            borderColor: currentTheme.colors.border
                        }}
                    >
                        <div className="flex items-center">
                            <UserIcon className="w-8 h-8 mr-4" style={{ color: currentTheme.colors.primary }} />
                            <div>
                                <p className="text-sm font-medium" style={{ color: currentTheme.colors.textSecondary }}>
                                    Total Empleados
                                </p>
                                <p className="text-2xl font-bold" style={{ color: currentTheme.colors.text }}>
                                    {empleados.length}
                                </p>
                            </div>
                        </div>
                    </div>

                    <div
                        className="p-6 rounded-lg border"
                        style={{
                            backgroundColor: currentTheme.colors.sidebar,
                            borderColor: currentTheme.colors.border
                        }}
                    >
                        <div className="flex items-center">
                            <UserIcon className="w-8 h-8 mr-4" style={{ color: currentTheme.colors.primary }} />
                            <div>
                                <p className="text-sm font-medium" style={{ color: currentTheme.colors.textSecondary }}>
                                    Activos
                                </p>
                                <p className="text-2xl font-bold" style={{ color: currentTheme.colors.text }}>
                                    {empleados.filter(emp => emp.estado === 'activo').length}
                                </p>
                            </div>
                        </div>
                    </div>

                    <div
                        className="p-6 rounded-lg border"
                        style={{
                            backgroundColor: currentTheme.colors.sidebar,
                            borderColor: currentTheme.colors.border
                        }}
                    >
                        <div className="flex items-center">
                            <UserIcon className="w-8 h-8 mr-4" style={{ color: currentTheme.colors.primary }} />
                            <div>
                                <p className="text-sm font-medium" style={{ color: currentTheme.colors.textSecondary }}>
                                    Inactivos
                                </p>
                                <p className="text-2xl font-bold" style={{ color: currentTheme.colors.text }}>
                                    {empleados.filter(emp => emp.estado === 'inactivo').length}
                                </p>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Actions */}
                <div className="flex justify-between items-center mb-6">
                    <h2 className="text-xl font-semibold" style={{ color: currentTheme.colors.text }}>
                        Lista de Empleados
                    </h2>
                    <button
                        onClick={handleOpenNewEmpleadoModal}
                        className="flex items-center gap-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
                    >
                        <PlusIcon className="w-4 h-4" />
                        Agregar Empleado
                    </button>
                </div>

                {/* Lista de empleados */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {empleados.length === 0 ? (
                        <div className="col-span-full text-center py-8">
                            <div className="text-gray-500 mb-4">
                                <UserIcon className="w-16 h-16 mx-auto mb-4 opacity-50" />
                                <h3 className="text-lg font-medium mb-2">No hay empleados registrados</h3>
                                <p className="text-sm">
                                    {user?.empresa_id
                                        ? "No se encontraron empleados en tu empresa. Haz clic en 'Agregar Empleado' para comenzar."
                                        : "No tienes una empresa asignada. Contacta al administrador."
                                    }
                                </p>
                            </div>
                        </div>
                    ) : (
                        empleados.map((empleado) => (
                            <div
                                key={empleado.id}
                                className="p-6 rounded-lg border cursor-pointer hover:shadow-lg transition-shadow"
                                style={{
                                    backgroundColor: currentTheme.colors.sidebar,
                                    borderColor: currentTheme.colors.border
                                }}
                                onClick={() => handleOpenModal(empleado)}
                            >
                                <div className="flex items-center mb-4">
                                    <div className="w-12 h-12 rounded-full bg-gray-300 flex items-center justify-center mr-4">
                                        {empleado.imagen ? (
                                            <img
                                                src={empleado.imagen}
                                                alt={empleado.nombreCompleto || empleado.nombre}
                                                className="w-full h-full rounded-full object-cover"
                                            />
                                        ) : (
                                            <UserIcon className="w-6 h-6 text-gray-600" />
                                        )}
                                    </div>
                                    <div className="flex-1">
                                        <h3 className="font-semibold" style={{ color: currentTheme.colors.text }}>
                                            {empleado.nombreCompleto || `${empleado.nombre} ${empleado.apellidos || ''}`}
                                        </h3>
                                        <p className="text-sm" style={{ color: currentTheme.colors.textSecondary }}>
                                            {empleado.puesto || 'Sin asignar'}
                                        </p>
                                        {/* Mostrar rol */}
                                        <div className="mt-1">
                                            {(() => {
                                                const { roles } = getRolesInfo(empleado);
                                                return (
                                                    <>
                                                        {roles.length > 0 && (
                                                            <p className="text-xs" style={{ color: currentTheme.colors.textSecondary }}>
                                                                <span className="font-medium">Rol:</span> {roles.join(', ')}
                                                            </p>
                                                        )}
                                                    </>
                                                );
                                            })()}
                                        </div>
                                    </div>
                                    <span
                                        className={`px-2 py-1 rounded-full text-xs font-medium ${empleado.estado === 'activo'
                                            ? 'bg-green-100 text-green-800'
                                            : 'bg-red-100 text-red-800'
                                            }`}
                                    >
                                        {empleado.estado === 'activo' ? 'Activo' : 'Inactivo'}
                                    </span>
                                </div>

                                <div className="space-y-2">
                                    <p className="text-sm" style={{ color: currentTheme.colors.textSecondary }}>
                                        <span className="font-medium">Email:</span> {empleado.email}
                                    </p>
                                    <p className="text-sm" style={{ color: currentTheme.colors.textSecondary }}>
                                        <span className="font-medium">Teléfono:</span> {empleado.telefono}
                                    </p>
                                    {empleado.nif && (
                                        <p className="text-sm" style={{ color: currentTheme.colors.textSecondary }}>
                                            <span className="font-medium">NIF:</span> {empleado.nif}
                                            {isAutoGeneratedData(empleado.nif, 'nif') && ( //isDevMode && TODO: Revisar
                                                <span className="ml-2 px-1 py-0.5 bg-yellow-100 text-yellow-800 text-xs rounded text-xs">
                                                    DEV
                                                </span>
                                            )}
                                        </p>
                                    )}
                                    {empleado.cifEmpresa && (
                                        <p className="text-sm" style={{ color: currentTheme.colors.textSecondary }}>
                                            <span className="font-medium">CIF:</span> {empleado.cifEmpresa}
                                        </p>
                                    )}
                                </div>
                            </div>
                        ))
                    )}
                </div>

                {/* Modal */}
                <ConfiguracionPersonalModal
                    empleado={selectedEmpleado}
                    isOpen={isModalOpen}
                    onClose={handleCloseModal}
                    onSave={handleSaveEmpleado}
                    onDelete={selectedEmpleado ? handleDeleteEmpleado : undefined}
                />
            </div>
        </div>
    );
};

export default Personal;

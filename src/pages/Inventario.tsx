
import React, { useState, useEffect } from 'react';
import { Header } from '../components';
import { useTheme } from '../hooks';
import { useAuth } from '../hooks/useAuth';
import ContenedorInventario from '../components/inventario/ContenedorInventario';
import IngredientesModal from '../components/inventario/inventarioModal/IngredientesModal';
import { useProductos, useCategorias } from '../hooks/useEntities';
import type { IInventarioItem } from '../types/inventario.types';
import type { IProducto, ICategoria } from '../types/database.types';

const Inventario: React.FC = () => {
  const { currentTheme } = useTheme();
  const { user } = useAuth();
  const { productos } = useProductos(user?.establecimiento_id || 7);
  const { categorias } = useCategorias(user?.establecimiento_id || 7);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [inventarioData, setInventarioData] = useState<IInventarioItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [isDevMode] = useState(import.meta.env.DEV);

  const headers = [
    'Componente',
    'Categoría',
    'Stock Actual',
    'Stock Mínimo',
    'Estado',
    'Acciones'
  ];

  // Función para detectar si un dato fue autogenerado
  const isAutoGeneratedData = (value: string | undefined, type: 'stock'): boolean => {
    if (!value) return false;
    if (type === 'stock') {
      // Verificar si el stock sigue un patrón de generación automática
      return /^\d+(\.\d+)?$/.test(value.toString()) && parseFloat(value.toString()) <= 100;
    }
    return false;
  };

  // Cargar datos de inventario desde mockups
  useEffect(() => {
    const loadInventario = async () => {
      try {
        setLoading(true);
        const productosData = productos || [];
        const categoriasData = categorias || [];

        // Filtrar productos por el establecimiento del usuario logueado
        const productosFiltrados = productosData.filter((producto: any) => {
          if (!user?.empresa_id) return false;
          // Por ahora usamos establecimiento_id: 7 como ejemplo
          // En producción esto vendría del contexto del usuario
          return producto.establecimiento_id === 7;
        });

        // Convertir productos a formato de inventario
        const inventarioItems: IInventarioItem[] = productosFiltrados.map((producto: any) => {
          const categoria = categoriasData.find((cat: any) => cat.identificador === producto.categoria_id);

          return {
            id: producto.id,
            nombre: producto.nombre,
            categoria: categoria?.nombre || 'Sin categoría',
            stockActual: producto.stock || 0,
            stockMinimo: producto.stock_minimo || 0,
            unidadMedida: producto.unidad_medida || 'unidad',
            controlStock: producto.control_stock,
            activo: producto.activo,
            imagen: producto.imagen,
            precio: producto.precio,
            categoriaId: producto.categoria_id,
            establecimientoId: producto.establecimiento_id
          };
        });

        setInventarioData(inventarioItems);
      } catch (error) {
        console.error('Error cargando inventario:', error);
        // Fallback a datos estáticos si hay error
        setInventarioData(getInventarioFallback());
      } finally {
        setLoading(false);
      }
    };

    loadInventario();
  }, [user, productos, categorias]);

  // Datos de fallback
  const getInventarioFallback = (): IInventarioItem[] => [
    {
      id: 1,
      nombre: 'Tomate Pera',
      categoria: 'Frutas y Hortalizas',
      stockActual: 4,
      stockMinimo: 2,
      unidadMedida: 'kg',
      controlStock: true,
      activo: true,
      precio: 2.50,
      establecimientoId: 7
    },
    {
      id: 2,
      nombre: 'Lechuga Romana',
      categoria: 'Frutas y Hortalizas',
      stockActual: 12,
      stockMinimo: 5,
      unidadMedida: 'unidades',
      controlStock: true,
      activo: true,
      precio: 1.20,
      establecimientoId: 7
    }
  ];

  const handleCreateIngrediente = () => {
    setIsModalOpen(true);
  };

  const handleRowClick = (item: IInventarioItem) => {
    console.log('Producto seleccionado:', item);
    // Aquí se puede abrir un modal de edición
  };

  const formatStock = (stock: number, unidad: string): string => {
    if (stock === 0) return '0 ' + unidad;
    return `${stock} ${unidad}`;
  };

  const getStockStatus = (stock: number, stockMinimo: number): { text: string; color: string } => {
    if (stock === 0) return { text: 'Sin stock', color: 'text-red-600' };
    if (stock <= stockMinimo) return { text: 'Stock bajo', color: 'text-yellow-600' };
    return { text: 'Disponible', color: 'text-green-600' };
  };

  return (
    <div className="min-h-screen overflow-x-hidden" style={{ backgroundColor: currentTheme.colors.background }}>
      <h1>(TO-DO FIX) RECORDAR QUE AQUI NO SE ESTAN MOSTRANDO LOS PRODUCTOS AL CREARLOS *El modal de crear producto no es el adecuado para esta vista* </h1>
      <div className="container mx-auto">
        <div className="mb-8">
          <Header
            title="Inventario"
          />
          {user?.empresa_id && (
            <p className="text-sm mt-1" style={{ color: currentTheme.colors.textSecondary }}>
              Productos de tu establecimiento • Total: {inventarioData.length} productos
            </p>
          )}
        </div>

        {loading ? (
          <div className="flex justify-center items-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          </div>
        ) : (
          <ContenedorInventario
            headers={headers}
            data={inventarioData.map(item => ({
              id: item.id,
              componente: item.nombre,
              categoria: item.categoria,
              stockActual: formatStock(item.stockActual, item.unidadMedida),
              stockMinimo: formatStock(item.stockMinimo, item.unidadMedida),
              estado: getStockStatus(item.stockActual, item.stockMinimo).text,
              precio: `€${item.precio.toFixed(2)}`,
              activo: item.activo,
              controlStock: item.controlStock
            }))}
            searchPlaceholder="Buscar productos..."
            createButtonText="Crear Producto"
            onCreateClick={handleCreateIngrediente}
            onRowClick={handleRowClick}
          />
        )}

        {/* Modal de Ingredientes */}
        <IngredientesModal
          isOpen={isModalOpen}
          onClose={() => setIsModalOpen(false)}
        />
      </div>
    </div>
  );
};

export default Inventario;
